{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is my second brain \ud83e\udde0 for Computer Science, Software Development, Problem Solving and My Life :) I'm interested in \ud83d\udc68\u200d\ud83d\udcbb Backend Develop (Java, Spring) Problem Solving","title":"Home"},{"location":"DB/SQL/JOIN/","text":"Cross Join \u00b6 select * from table1 , table2 join \uc870\uac74 \uc0dd\ub7b5. \ub370\uce74\ub974\ud2b8 \uacf1. Natural Join \u00b6 select * from departments natural join locations \ub450 \ud14c\uc774\ube14\uc5d0 \uacf5\ud1b5 \uceec\ub7fc\uc774 \uc788\ub294 \uacbd\uc6b0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc870\uc778. \uceec\ub7fc\uba85 \uacb9\uccd0\uc11c \uc5c9\ub6b1\ud55c \uacb0\uacfc\uac00 \ub098\uc62c \uc218 \uc788\uc73c\ub2c8 \uc8fc\uc758. Inner Join \u00b6 select * from employees e inner join departments d on ( e . department_id = d . department_id ) inner \ud0a4\uc6cc\ub4dc \uc0dd\ub7b5 \uac00\ub2a5. ANSI \ud45c\uc900 \ubb38\ubc95. on \uc808\uc5d0 \uc870\uc778 \uc870\uac74 \uc791\uc131.( where \uc808\uc5d0\ub3c4 \uc791\uc131 \uac00\ub2a5) \uceec\ub7fc\uba85\uc774 \uac19\uc740 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 using \uc808\uc744 \uc0ac\uc6a9\ud574\ub3c4 \ubb34\ubc29\ud568. select * from employees inner join departments using ( department_id ) Oracle \ubc29\uc2dd \u00b6 select t1 . col1 , t1 . col2 , t2 . col1 from table1 t1 , table2 t2 where t1 . col3 = t2 . col3 from \uc808\uc5d0 \ud544\uc694\ub85c \ud558\ub294 \ud14c\uc774\ube14\uc744 \ubaa8\ub450 \uc801\ub294\ub2e4. ( alias \uc0ac\uc6a9 \uac00\ub2a5) \uc801\uc808\ud55c \uc870\uac74\uc744 where \uc808\uc5d0 \ubd80\uc5ec\ud55c\ub2e4. Outer Join \u00b6 select * from employees e left outer join departments d on ( e . department_id = d . department_id ) left(right) outer join : \uc67c\ucabd(\uc624\ub978\ucabd)\uc758 \ubaa8\ub4e0 \ud29c\ud50c\uc740 \uacb0\uacfc \ud14c\uc774\ube14\uc5d0 \ub098\ud0c0\ub0a8. full outer join : \uc591\ucabd \ubaa8\ub450 \uacb0\uacfc \ud14c\uc774\ube14\uc5d0 \ub098\ud0c0\ub0a8. outer \ud0a4\uc6cc\ub4dc \uc0dd\ub7b5 \uac00\ub2a5. Self Join \u00b6 select e . name as '\uc0ac\uc6d0 \uc774\ub984' , m . name as '\uc0c1\uc0ac \uc774\ub984' from employees e join employees m on ( e . manager_id = m . employee_id ) \uac19\uc740 \ud14c\uc774\ube14\uc5d0 alias \ub2e4\ub974\uac8c \uc8fc\uace0 join","title":"JOIN"},{"location":"DB/SQL/JOIN/#cross-join","text":"select * from table1 , table2 join \uc870\uac74 \uc0dd\ub7b5. \ub370\uce74\ub974\ud2b8 \uacf1.","title":"Cross Join"},{"location":"DB/SQL/JOIN/#natural-join","text":"select * from departments natural join locations \ub450 \ud14c\uc774\ube14\uc5d0 \uacf5\ud1b5 \uceec\ub7fc\uc774 \uc788\ub294 \uacbd\uc6b0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc870\uc778. \uceec\ub7fc\uba85 \uacb9\uccd0\uc11c \uc5c9\ub6b1\ud55c \uacb0\uacfc\uac00 \ub098\uc62c \uc218 \uc788\uc73c\ub2c8 \uc8fc\uc758.","title":"Natural Join"},{"location":"DB/SQL/JOIN/#inner-join","text":"select * from employees e inner join departments d on ( e . department_id = d . department_id ) inner \ud0a4\uc6cc\ub4dc \uc0dd\ub7b5 \uac00\ub2a5. ANSI \ud45c\uc900 \ubb38\ubc95. on \uc808\uc5d0 \uc870\uc778 \uc870\uac74 \uc791\uc131.( where \uc808\uc5d0\ub3c4 \uc791\uc131 \uac00\ub2a5) \uceec\ub7fc\uba85\uc774 \uac19\uc740 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 using \uc808\uc744 \uc0ac\uc6a9\ud574\ub3c4 \ubb34\ubc29\ud568. select * from employees inner join departments using ( department_id )","title":"Inner Join"},{"location":"DB/SQL/JOIN/#oracle","text":"select t1 . col1 , t1 . col2 , t2 . col1 from table1 t1 , table2 t2 where t1 . col3 = t2 . col3 from \uc808\uc5d0 \ud544\uc694\ub85c \ud558\ub294 \ud14c\uc774\ube14\uc744 \ubaa8\ub450 \uc801\ub294\ub2e4. ( alias \uc0ac\uc6a9 \uac00\ub2a5) \uc801\uc808\ud55c \uc870\uac74\uc744 where \uc808\uc5d0 \ubd80\uc5ec\ud55c\ub2e4.","title":"Oracle \ubc29\uc2dd"},{"location":"DB/SQL/JOIN/#outer-join","text":"select * from employees e left outer join departments d on ( e . department_id = d . department_id ) left(right) outer join : \uc67c\ucabd(\uc624\ub978\ucabd)\uc758 \ubaa8\ub4e0 \ud29c\ud50c\uc740 \uacb0\uacfc \ud14c\uc774\ube14\uc5d0 \ub098\ud0c0\ub0a8. full outer join : \uc591\ucabd \ubaa8\ub450 \uacb0\uacfc \ud14c\uc774\ube14\uc5d0 \ub098\ud0c0\ub0a8. outer \ud0a4\uc6cc\ub4dc \uc0dd\ub7b5 \uac00\ub2a5.","title":"Outer Join"},{"location":"DB/SQL/JOIN/#self-join","text":"select e . name as '\uc0ac\uc6d0 \uc774\ub984' , m . name as '\uc0c1\uc0ac \uc774\ub984' from employees e join employees m on ( e . manager_id = m . employee_id ) \uac19\uc740 \ud14c\uc774\ube14\uc5d0 alias \ub2e4\ub974\uac8c \uc8fc\uace0 join","title":"Self Join"},{"location":"DB/SQL/SELECT/","text":"SELECT ( DISTINCT ) \uceec\ub7fc\uba85 ( ALIAS ) FROM \ud14c\uc774\ube14\uba85 WHERE \uc870\uac74\uc2dd GROUP BY \uceec\ub7fc\uba85 HAVING \uc870\uac74\uc2dd ORDER BY \uceec\ub7fc\uba85 \ud639\uc740 \ud45c\ud604\uc2dd ( ASC \ud639\uc740 DESC ) WHERE \ub85c \uba3c\uc800 \uc870\uac74\uc744 \uac78\uace0, GROUP BY \ub85c \uadf8\ub8f9\uc744 \ub098\ub204\uace0, \ub098\ub208 \uadf8\ub8f9\uc5d0\uc11c \ub610 HAVING \uc73c\ub85c \uc870\uac74 \uac78\uae30.","title":"SELECT"},{"location":"Dev/JPA/","text":"N:1 \uc591\ubc29\ud5a5 \u00b6 N\ucabd\uc5d0 \uc678\ub798\ud0a4 \uc874\uc7ac. \uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778. \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \uc5d4\ud2f0\ud2f0\uc5d0 @ManyToOne , @JoinColumn(name = \"FK\") \uc73c\ub85c \ub9e4\ud551 \ubc18\ub300\ucabd\uc5d0\ub294 @OneToMany(mappedBy = \"___\") 1:1 \uc591\ubc29\ud5a5 \u00b6 \ub354 \uc790\uc8fc \uc870\ud68c\ud558\ub294 \ucabd\uc5d0 FK \ub123\uae30. \uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778. \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \uc5d4\ud2f0\ud2f0\uc5d0 @OneToOne, @JoinColumn(name = \"FK\") \ubc18\ub300\ucabd\uc5d0 @OneToOne(mappedBy = \"___\") N:M \uc591\ubc29\ud5a5 \u00b6 1:N, N:1\ub85c \ud480\uc5b4\ub0b4\uae30 \ubaa8\ub4e0 \uc5f0\uad00\uad00\uacc4\ub294 \uc9c0\uc5f0\ub85c\ub529\uc73c\ub85c \uc124\uc815 \u00b6 @OneToOne, @ManyToOne \uad00\uacc4\ub294 \uae30\ubcf8\uc774 \uc989\uc2dc\ub85c\ub529(EAGER) \uc774\ubbc0\ub85c \uc9c1\uc811 \uc9c0\uc5f0\ub85c\ub529(LAZY) \uc73c\ub85c \uc124\uc815\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. (N+1 \ubb38\uc81c \ubc29\uc9c0) \uceec\ub809\uc158\uc740 \ud544\ub4dc \ucd08\uae30\ud654 \u00b6 null \ubb38\uc81c\uc5d0\uc11c \uc548\uc804\ud558\ub2e4. \ud558\uc774\ubc84\ub124\uc774\ud2b8\ub294 \uc5d4\ud2f0\ud2f0\ub97c \uc601\uc18d\ud654\ud560 \ub54c \uceec\ub809\uc158\uc744 \uac10\uc2f8\uc11c \ud558\uc774\ubc84\ub124\uc774\ud2b8\uac00 \uc81c\uacf5\ud558\ub294 \ub0b4\uc7a5 \uceec\ub809\uc158\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. \uc784\uc758\uc758 \uba54\uc11c\ub4dc\uc5d0\uc11c \uceec\ub809\uc158\uc744 \uc798\ubabb \uc0dd\uc131\ud558\uba74, \ud558\uc774\ubc84\ub124\uc774\ud2b8 \ub0b4\ubd80 \uba54\ucee4\ub2c8\uc998\uc5d0 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud544\ub4dc \ub808\ubca8\uc5d0\uc11c \uc0dd\uc131\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \uc548\uc804\ud558\uace0, \ucf54\ub4dc\ub3c4 \uac04\uacb0\ud558\ub2e4. mappedBy \u00b6 \uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778\uc774 \ubc18\ub300\ucabd\uc5d0 \uc788\uace0, \uc790\uae30 \uc790\uc2e0\uc744 \"___\" \ub77c\uace0 \ucc38\uc870\ud558\uace0 \uc788\ub2e4\ub294 \uc758\ubbf8. mappedBy \uc5c6\uc774 \uadf8\ub0e5 \uc5f0\uad00\uad00\uacc4 \uc124\uc815\uc2dc \uc870\uc778 \ud14c\uc774\ube14 \uc0dd\uae40. \uc870\uc778 \ud14c\uc774\ube14 \uc5c6\uc774 FK \uc0ac\uc6a9\ud558\uace0\uc2f6\uc73c\uba74 \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \ubc18\ub300\ucabd\uc5d0 mappedBy \uc0ac\uc6a9. cascade \u00b6 \uc6d0\ub798 \ud558\ub098\ud558\ub098 \ub2e4 \uc601\uc18d\uc131 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud574\uc918\uc57c \ud568. \uc0c1\uc704 \uc5d4\ud2f0\ud2f0\uc5d0\uc11c \ud558\uc704 \uc5d4\ud2f0\ud2f0\ub85c \uc601\uc18d \uc0c1\ud0dc \uc804\ud30c. ex) User\ub97c \uc9c0\uc6e0\uc744 \ub54c, User\uac00 \uc4f4 \uae00\ub3c4 \ubaa8\ub450 \uc9c0\uc6b0\uace0 \uc2f6\ub2e4\uba74 ? @Transactional \u00b6 \uba54\uc18c\ub4dc\uac00 \uc2dc\uc791\ud560 \ub54c \ud2b8\ub79c\uc7ad\uc158 begin() , \uba54\uc11c\ub4dc\uac00 \uc885\ub8cc\ub420 \ub54c \ud2b8\ub79c\uc7ad\uc158 commit() . \uc911\uac04\uc5d0 \uc608\uc678 \ubc1c\uc0dd\uc2dc \ud2b8\ub79c\uc7ad\uc158 rollback() . readOnly=true : \ub370\uc774\ud130\uc758 \ubcc0\uacbd\uc774 \uc5c6\ub294 \uc77d\uae30 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9, \uc601\uc18d\uc131 \ucee8\ud14d\uc2a4\ud2b8\ub97c \ud50c\ub7ec\uc2dc \ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc57d\uac04\uc758 \uc131\ub2a5 \ud5a5\uc0c1(\uc77d\uae30 \uc804\uc6a9\uc5d0\ub294 \ub2e4 \uc801\uc6a9) By default, CRUD methods on repository instances inherited from SimpleJpaRepository are transactional. For read operations, the transaction configuration readOnly flag is set to true . All others are configured with a plain @Transactional so that default transaction configuration applies. \uc911\ucca9\ub418\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac. @Service \uacc4\uce35\uc5d0\uc11c @Transactional \uc744 \ub2ec\uc544\uc11c \uc5ec\ub7ec Repository\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uac00 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\uac00 \ub418\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4. \uc5f0\uad00\uad00\uacc4 \ud3b8\uc758 \uba54\uc11c\ub4dc \u00b6 DB\uc5d0 flush \ub418\uae30 \uc804\uc5d0\ub3c4 \uc591\ubc29\ud5a5\uc73c\ub85c \ubb36\uc5ec \uc788\ub294 \uc790\ub8cc\uc758 \uc77c\uad00\uc131\uc744 \uc9c0\ud0a4\uae30 \uc704\ud574 \uc791\uc131.","title":"JPA"},{"location":"Dev/JPA/#n1","text":"N\ucabd\uc5d0 \uc678\ub798\ud0a4 \uc874\uc7ac. \uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778. \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \uc5d4\ud2f0\ud2f0\uc5d0 @ManyToOne , @JoinColumn(name = \"FK\") \uc73c\ub85c \ub9e4\ud551 \ubc18\ub300\ucabd\uc5d0\ub294 @OneToMany(mappedBy = \"___\")","title":"N:1 \uc591\ubc29\ud5a5"},{"location":"Dev/JPA/#11","text":"\ub354 \uc790\uc8fc \uc870\ud68c\ud558\ub294 \ucabd\uc5d0 FK \ub123\uae30. \uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778. \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \uc5d4\ud2f0\ud2f0\uc5d0 @OneToOne, @JoinColumn(name = \"FK\") \ubc18\ub300\ucabd\uc5d0 @OneToOne(mappedBy = \"___\")","title":"1:1 \uc591\ubc29\ud5a5"},{"location":"Dev/JPA/#nm","text":"1:N, N:1\ub85c \ud480\uc5b4\ub0b4\uae30","title":"N:M \uc591\ubc29\ud5a5"},{"location":"Dev/JPA/#_1","text":"@OneToOne, @ManyToOne \uad00\uacc4\ub294 \uae30\ubcf8\uc774 \uc989\uc2dc\ub85c\ub529(EAGER) \uc774\ubbc0\ub85c \uc9c1\uc811 \uc9c0\uc5f0\ub85c\ub529(LAZY) \uc73c\ub85c \uc124\uc815\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. (N+1 \ubb38\uc81c \ubc29\uc9c0)","title":"\ubaa8\ub4e0 \uc5f0\uad00\uad00\uacc4\ub294 \uc9c0\uc5f0\ub85c\ub529\uc73c\ub85c \uc124\uc815"},{"location":"Dev/JPA/#_2","text":"null \ubb38\uc81c\uc5d0\uc11c \uc548\uc804\ud558\ub2e4. \ud558\uc774\ubc84\ub124\uc774\ud2b8\ub294 \uc5d4\ud2f0\ud2f0\ub97c \uc601\uc18d\ud654\ud560 \ub54c \uceec\ub809\uc158\uc744 \uac10\uc2f8\uc11c \ud558\uc774\ubc84\ub124\uc774\ud2b8\uac00 \uc81c\uacf5\ud558\ub294 \ub0b4\uc7a5 \uceec\ub809\uc158\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. \uc784\uc758\uc758 \uba54\uc11c\ub4dc\uc5d0\uc11c \uceec\ub809\uc158\uc744 \uc798\ubabb \uc0dd\uc131\ud558\uba74, \ud558\uc774\ubc84\ub124\uc774\ud2b8 \ub0b4\ubd80 \uba54\ucee4\ub2c8\uc998\uc5d0 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud544\ub4dc \ub808\ubca8\uc5d0\uc11c \uc0dd\uc131\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \uc548\uc804\ud558\uace0, \ucf54\ub4dc\ub3c4 \uac04\uacb0\ud558\ub2e4.","title":"\uceec\ub809\uc158\uc740 \ud544\ub4dc \ucd08\uae30\ud654"},{"location":"Dev/JPA/#mappedby","text":"\uc5f0\uad00\uad00\uacc4\uc758 \uc8fc\uc778\uc774 \ubc18\ub300\ucabd\uc5d0 \uc788\uace0, \uc790\uae30 \uc790\uc2e0\uc744 \"___\" \ub77c\uace0 \ucc38\uc870\ud558\uace0 \uc788\ub2e4\ub294 \uc758\ubbf8. mappedBy \uc5c6\uc774 \uadf8\ub0e5 \uc5f0\uad00\uad00\uacc4 \uc124\uc815\uc2dc \uc870\uc778 \ud14c\uc774\ube14 \uc0dd\uae40. \uc870\uc778 \ud14c\uc774\ube14 \uc5c6\uc774 FK \uc0ac\uc6a9\ud558\uace0\uc2f6\uc73c\uba74 \uc5f0\uad00\uad00\uacc4 \uc8fc\uc778 \ubc18\ub300\ucabd\uc5d0 mappedBy \uc0ac\uc6a9.","title":"mappedBy"},{"location":"Dev/JPA/#cascade","text":"\uc6d0\ub798 \ud558\ub098\ud558\ub098 \ub2e4 \uc601\uc18d\uc131 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud574\uc918\uc57c \ud568. \uc0c1\uc704 \uc5d4\ud2f0\ud2f0\uc5d0\uc11c \ud558\uc704 \uc5d4\ud2f0\ud2f0\ub85c \uc601\uc18d \uc0c1\ud0dc \uc804\ud30c. ex) User\ub97c \uc9c0\uc6e0\uc744 \ub54c, User\uac00 \uc4f4 \uae00\ub3c4 \ubaa8\ub450 \uc9c0\uc6b0\uace0 \uc2f6\ub2e4\uba74 ?","title":"cascade"},{"location":"Dev/JPA/#transactional","text":"\uba54\uc18c\ub4dc\uac00 \uc2dc\uc791\ud560 \ub54c \ud2b8\ub79c\uc7ad\uc158 begin() , \uba54\uc11c\ub4dc\uac00 \uc885\ub8cc\ub420 \ub54c \ud2b8\ub79c\uc7ad\uc158 commit() . \uc911\uac04\uc5d0 \uc608\uc678 \ubc1c\uc0dd\uc2dc \ud2b8\ub79c\uc7ad\uc158 rollback() . readOnly=true : \ub370\uc774\ud130\uc758 \ubcc0\uacbd\uc774 \uc5c6\ub294 \uc77d\uae30 \uc804\uc6a9 \uba54\uc11c\ub4dc\uc5d0 \uc0ac\uc6a9, \uc601\uc18d\uc131 \ucee8\ud14d\uc2a4\ud2b8\ub97c \ud50c\ub7ec\uc2dc \ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc57d\uac04\uc758 \uc131\ub2a5 \ud5a5\uc0c1(\uc77d\uae30 \uc804\uc6a9\uc5d0\ub294 \ub2e4 \uc801\uc6a9) By default, CRUD methods on repository instances inherited from SimpleJpaRepository are transactional. For read operations, the transaction configuration readOnly flag is set to true . All others are configured with a plain @Transactional so that default transaction configuration applies. \uc911\ucca9\ub418\uba74 \uae30\ubcf8\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac. @Service \uacc4\uce35\uc5d0\uc11c @Transactional \uc744 \ub2ec\uc544\uc11c \uc5ec\ub7ec Repository\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uac00 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\uac00 \ub418\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4.","title":"@Transactional"},{"location":"Dev/JPA/#_3","text":"DB\uc5d0 flush \ub418\uae30 \uc804\uc5d0\ub3c4 \uc591\ubc29\ud5a5\uc73c\ub85c \ubb36\uc5ec \uc788\ub294 \uc790\ub8cc\uc758 \uc77c\uad00\uc131\uc744 \uc9c0\ud0a4\uae30 \uc704\ud574 \uc791\uc131.","title":"\uc5f0\uad00\uad00\uacc4 \ud3b8\uc758 \uba54\uc11c\ub4dc"},{"location":"Life/2023%20%EC%83%88%ED%95%B4%20%EB%AA%A9%ED%91%9C/","text":"\ubc31\uc900 \ub2e4\uc774\uc544 \ucf54\ub4dc\ud3ec\uc2a4 \uafb8\uc900\ud788 \ucc38\uc5ec, \ube14\ub8e8 \uac1c\ubc1c \ub3d9\uc544\ub9ac \ub4e4\uc5b4\uac00\uae30 \uba74\ud5c8\ub530\uae30 \uc6b4\ub3d9\ud558\uae30","title":"2023 \uc0c8\ud574 \ubaa9\ud45c"},{"location":"Life/%EC%A0%84%EC%97%AD%20%ED%9B%84%EA%B8%B0/","text":"\ud558\ub098\ub3c4 \uc2e4\uac10\uc774 \ub098\uc9c0 \uc54a\ub294\ub2e4. \uc544\uc9c1\ub3c4 \uadf8\ub0e5 \ud734\uac00 \ub098\uc628 \ub290\ub08c\uc774\ub2e4. \ub108\ubb34 \uc624\ub798 \uc788\uc5c8\ub098\ubcf4\ub2e4. 21\uac1c\uc6d4\uc774\ub77c\ub294 \uc2dc\uac04\ub3d9\uc548 \uc5bb\uc740 \uac83\ub3c4 \ub9ce\uace0, \uc783\uc740 \uac83\ub3c4 \ub9ce\uc740\ub370 \uadf8\ub798\ub3c4 \ubb50 \ub098\uc058\uc9c0 \uc54a\uc558\ub2e4. \ubbf8\ud654\ub3fc\uc11c \uadf8\ub7f0\uac00 \uc870\uae08 \uadf8\ub9bd\uae34 \ud558\ub2e4. \ubb3c\ub860 \ub2e4\uc2dc \uac00\ub77c\uba74 \uc808\ub300 \uc548\uac10. \ub098\ub294 \uc815\ub9d0 \uc6b4\uc774 \uc88b\uc740 \uc0ac\ub78c\uc774\ub2e4. \ud558\ub098\ubd80\ud130 \uc5f4\uae4c\uc9c0 \ubc1b\uae30\ub9cc \ud55c \uac83 \uac19\ub2e4. \uc55e\uc73c\ub85c\ub294 \uc9c0\uae08\ubcf4\ub2e4 \ub354 \uba4b\uc9c4 \uc0ac\ub78c\uc774 \ub418\uace0\uc2f6\ub2e4.","title":"\uc804\uc5ed \ud6c4\uae30"},{"location":"Life/%EC%A0%84%EC%97%AD%EA%B9%8C%EC%A7%80%20%ED%95%9C%20%EB%8B%AC%20%EB%82%A8%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4%21/","text":"\"\ub5a8\uc5b4\uc9c0\ub294 \ub099\uc5fd\ub3c4 \uc870\uc2ec\ud574\uc57c \ud558\ub294 \uc2dc\uae30\" \ub77c\uace0 \ud55c\ub2e4. \ud55c \ub2ec \ub0b4\ub0b4 \uc544\ubb34\ub7f0 \uc77c\ub3c4 \uc5c6\uc774 \uc9c0\ub098\uac14\uc73c\uba74 \uc88b\uaca0\ub2e4. \uc81c\ubc1c..! \uc9c0\uae08\uae4c\uc9c0 \uacf5\ubd80\ub97c \ud558\uae34 \ud588\uc9c0\ub9cc \ucc10\uc804\uc5ed \ud558\uace0 \ub098\uc11c\ub294 \uac01\uc7a1\uace0 \ub354 \uc5f4\uc2ec\ud788 \ud574\uc57c\uaca0\ub2e4. \ubc99\ucee4 \uc548\ub4e4\uc5b4\uac04\uc9c0 \ub450\ub2ec\uc774\ub098 \ub410\ub2e4. \uc194\uc9c1\ud788 \uadf8\ub9ac\uc6c0. \ub531 \ud55c \ubc88\ub9cc \ub354 \ub4e4\uc5b4\uac00\uace0 \uc2f6\ub2e4. \uad6c\uacbd \ub354 \ud558\uace0 \ud328\uc2a4 \ubc18\ub0a9\ud560\uac78.. \u3160\u3160 \uadfc\ub370 \uc694\uc998 \ud749\ud749\ud55c\uac70 \ubcf4\uba74 \uc880 \uadf8\ub807\uae30\ub3c4 \ud558\uace0.. \u314b\u314b \ud654\uc774\ud305!","title":"\uc804\uc5ed\uae4c\uc9c0 \ud55c \ub2ec \ub0a8\uc558\uc2b5\ub2c8\ub2e4!"},{"location":"PS/%EA%B7%B8%EB%9E%98%ED%94%84%20%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EC%A0%95%EB%A6%AC/","text":"\ub2e4\uc775\uc2a4\ud2b8\ub77c (Dijkstra) \u00b6 \uc2dc\uc791 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(E\\log V)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uac04\uc120\uc744 \ud55c \ubc88\uc529 \ud655\uc778\ud558\uae30 \ub54c\ubb38\uc5d0 \uc778\uc811 \ub9ac\uc2a4\ud2b8\ub85c \uad6c\ud604. \ucd5c\ub2e8\uac70\ub9ac\uac00 \uc5ec\ub7ec \ubc88 \uac31\uc2e0\ub41c \uacbd\uc6b0 ( cost > dist[cur] ) \uc2a4\ud0b5. cost\uac00 \ub0ae\uc740 \uac04\uc120\ubd80\ud130 \ud655\uc778. priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >>> pq ; int dijkstra ( int start , int end ) { fill ( dist , dist + MAX , INF ); dist [ start ] = 0 ; pq . emplace ( 0 , start ); while ( ! pq . empty ()) { auto [ cost , cur ] = pq . top (); pq . pop (); if ( cost > dist [ cur ]) continue ; for ( auto & [ ncost , next ] : adj [ cur ]) { if ( dist [ next ] > dist [ cur ] + ncost ) { dist [ next ] = dist [ cur ] + ncost ; pq . emplace ( dist [ next ], next ); } } } return dist [ end ]; } \ubca8\ub9cc \ud3ec\ub4dc (Bellman - Ford) \u00b6 \uc2dc\uc791 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(EV)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc775\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998\uacfc\ub294 \ub2ec\ub9ac \uc74c\uc758 \uac04\uc120 \uc774 \uc874\uc7ac\ud574\ub3c4 \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud560 \uc218 \uc788\ub2e4. \ucd5c\ub2e8\uacbd\ub85c\ub294 \uc544\ubb34\ub9ac \uae38\uc5b4\ub3c4 \\(V-1\\) \uac1c\uc758 \uac04\uc120\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uac04\uc120 \uc644\ud654\ub97c \\(V-1\\) \ubc88 \uc9c4\ud589\ud55c\ub2e4. \ub9cc\uc57d \\(V-1\\) \ubc88 \uc9c4\ud589 \uc774\ud6c4\uc5d0\ub3c4 \ucd5c\ub2e8\uac70\ub9ac\uac00 \uc9e7\uc544\uc9c4\ub2e4\uba74, \uc774\ub294 \uc74c\uc758 \uc0ac\uc774\ud074 \uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac83\uc774\ub2e4. int start = 0 ; fill ( dist , dist + MAX , INF ); dist [ start ] = 0 ; bool neg = false ; for ( int k = 0 ; k < N ; k ++ ) { for ( int i = 0 ; i < N ; i ++ ) { if ( dist [ i ] == INF ) continue ; for ( auto p : adj [ i ]) { auto [ cost , next ] = p ; if ( dist [ next ] > dist [ i ] + cost ) { dist [ next ] = dist [ i ] + cost ; if ( k == N -1 ) neg = true ; } } } } \ud50c\ub85c\uc774\ub4dc \uc640\uc0ec (Floyd - Warshall) \u00b6 \ubaa8\ub4e0 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(N^3)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ubc18\ubcf5\ubb38 \uc21c\uc11c\uc5d0 \uc720\uc758\ud55c\ub2e4. \\(dist(i, j)\\) \uc640 \\(dist(i, k) + dist(k, j)\\) \ub97c \ube44\uad50\ud558\ub294\ub370, \\(k\\) \ub97c \uace0\uc815\uc2dc\ucf1c\ub193\uace0 \\(i, j\\) \ub97c \uc6c0\uc9c1\uc778\ub2e4. \ub2e4\uc774\ub098\ubbf9 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc77c\uc885. while ( r -- ) { int a , b , c ; cin >> a >> b >> c ; dist [ a -1 ][ b -1 ] = c ; dist [ b -1 ][ a -1 ] = c ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ! dist [ i ][ j ]) dist [ i ][ j ] = 1e9 ; if ( i == j ) dist [ i ][ j ] = 0 ; } } // i -> j vs i -> k -> j for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dist [ i ][ j ] = min ( dist [ i ][ j ], dist [ i ][ k ] + dist [ k ][ j ]); } } }","title":"\uadf8\ub798\ud504 \ucd5c\ub2e8\uacbd\ub85c \uc54c\uace0\ub9ac\uc998 \uc815\ub9ac"},{"location":"PS/%EA%B7%B8%EB%9E%98%ED%94%84%20%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EC%A0%95%EB%A6%AC/#dijkstra","text":"\uc2dc\uc791 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(E\\log V)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uac04\uc120\uc744 \ud55c \ubc88\uc529 \ud655\uc778\ud558\uae30 \ub54c\ubb38\uc5d0 \uc778\uc811 \ub9ac\uc2a4\ud2b8\ub85c \uad6c\ud604. \ucd5c\ub2e8\uac70\ub9ac\uac00 \uc5ec\ub7ec \ubc88 \uac31\uc2e0\ub41c \uacbd\uc6b0 ( cost > dist[cur] ) \uc2a4\ud0b5. cost\uac00 \ub0ae\uc740 \uac04\uc120\ubd80\ud130 \ud655\uc778. priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >>> pq ; int dijkstra ( int start , int end ) { fill ( dist , dist + MAX , INF ); dist [ start ] = 0 ; pq . emplace ( 0 , start ); while ( ! pq . empty ()) { auto [ cost , cur ] = pq . top (); pq . pop (); if ( cost > dist [ cur ]) continue ; for ( auto & [ ncost , next ] : adj [ cur ]) { if ( dist [ next ] > dist [ cur ] + ncost ) { dist [ next ] = dist [ cur ] + ncost ; pq . emplace ( dist [ next ], next ); } } } return dist [ end ]; }","title":"\ub2e4\uc775\uc2a4\ud2b8\ub77c (Dijkstra)"},{"location":"PS/%EA%B7%B8%EB%9E%98%ED%94%84%20%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EC%A0%95%EB%A6%AC/#bellman-ford","text":"\uc2dc\uc791 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(EV)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc775\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998\uacfc\ub294 \ub2ec\ub9ac \uc74c\uc758 \uac04\uc120 \uc774 \uc874\uc7ac\ud574\ub3c4 \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \ucd5c\ub2e8\uac70\ub9ac\ub97c \uad6c\ud560 \uc218 \uc788\ub2e4. \ucd5c\ub2e8\uacbd\ub85c\ub294 \uc544\ubb34\ub9ac \uae38\uc5b4\ub3c4 \\(V-1\\) \uac1c\uc758 \uac04\uc120\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uac04\uc120 \uc644\ud654\ub97c \\(V-1\\) \ubc88 \uc9c4\ud589\ud55c\ub2e4. \ub9cc\uc57d \\(V-1\\) \ubc88 \uc9c4\ud589 \uc774\ud6c4\uc5d0\ub3c4 \ucd5c\ub2e8\uac70\ub9ac\uac00 \uc9e7\uc544\uc9c4\ub2e4\uba74, \uc774\ub294 \uc74c\uc758 \uc0ac\uc774\ud074 \uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac83\uc774\ub2e4. int start = 0 ; fill ( dist , dist + MAX , INF ); dist [ start ] = 0 ; bool neg = false ; for ( int k = 0 ; k < N ; k ++ ) { for ( int i = 0 ; i < N ; i ++ ) { if ( dist [ i ] == INF ) continue ; for ( auto p : adj [ i ]) { auto [ cost , next ] = p ; if ( dist [ next ] > dist [ i ] + cost ) { dist [ next ] = dist [ i ] + cost ; if ( k == N -1 ) neg = true ; } } } }","title":"\ubca8\ub9cc \ud3ec\ub4dc (Bellman - Ford)"},{"location":"PS/%EA%B7%B8%EB%9E%98%ED%94%84%20%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EC%A0%95%EB%A6%AC/#floyd-warshall","text":"\ubaa8\ub4e0 \uc815\uc810\uc5d0\uc11c, \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8\uac70\ub9ac\ub97c \\(O(N^3)\\) \uc5d0 \uad6c\ud560 \uc218 \uc788\ub2e4. \ubc18\ubcf5\ubb38 \uc21c\uc11c\uc5d0 \uc720\uc758\ud55c\ub2e4. \\(dist(i, j)\\) \uc640 \\(dist(i, k) + dist(k, j)\\) \ub97c \ube44\uad50\ud558\ub294\ub370, \\(k\\) \ub97c \uace0\uc815\uc2dc\ucf1c\ub193\uace0 \\(i, j\\) \ub97c \uc6c0\uc9c1\uc778\ub2e4. \ub2e4\uc774\ub098\ubbf9 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc77c\uc885. while ( r -- ) { int a , b , c ; cin >> a >> b >> c ; dist [ a -1 ][ b -1 ] = c ; dist [ b -1 ][ a -1 ] = c ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ! dist [ i ][ j ]) dist [ i ][ j ] = 1e9 ; if ( i == j ) dist [ i ][ j ] = 0 ; } } // i -> j vs i -> k -> j for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dist [ i ][ j ] = min ( dist [ i ][ j ], dist [ i ][ k ] + dist [ k ][ j ]); } } }","title":"\ud50c\ub85c\uc774\ub4dc \uc640\uc0ec (Floyd - Warshall)"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/","text":"PS\uc5d0\uc11c \uc790\uc8fc \uc4f0\uc774\ub294 \uae30\ubc95\uc778 \ube44\ud2b8\ub9c8\uc2a4\ud06c \uc815\ub9ac \ube44\ud2b8 \uc5f0\uc0b0\uc790 \u00b6 AND a & b OR a | b XOR a ^ b NOT ~a \uc815\uc218 a\ub97c \uc67c\ucabd\uc73c\ub85c b\ube44\ud2b8 \uc2dc\ud504\ud2b8 a << b \uc815\uc218 a\ub97c \uc624\ub978\ucabd\uc73c\ub85c b\ube44\ud2b8 \uc2dc\ud504\ud2b8 a >> b \uc720\uc758\ud560 \uc810 \u00b6 \ube44\ud2b8 \uc5f0\uc0b0\uc790\uc758 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub294 == \ub4f1 \ube44\uad50 \uc5f0\uc0b0\uc790\ubcf4\ub2e4 \uc6b0\uc120\uc21c\uc704\uac00 \ub0ae\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uad04\ud638\ub97c \uaf2d \ubd99\uc5ec\uc8fc\uc790. bool ret = ((a & b) == 5); 64\ube44\ud2b8 \uc815\uc218\uc5d0\uc11c \ube44\ud2b8 \uc5f0\uc0b0\uc744 \ud560 \ub54c \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. (1LL << 60) \ube44\ud2b8 \uc804\ubd80 \ucc44\uc6b0\uae30 \u00b6 int mask = (1 << N) - 1; \uc6d0\uc18c \ucd94\uac00\ud558\uae30 \u00b6 mask |= (1 << p); \uc6d0\uc18c\uc758 \ud3ec\ud568 \uc5ec\ubd80 \ud655\uc778\ud558\uae30 \u00b6 if (mask & (1 << p)) \ube44\uad50 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0 ((mask & (1 << p)) == 0) \uc774\ub807\uac8c \uad04\ud638\ub85c \ubb36\uc5b4\uc8fc\uc790. \uc6d0\uc18c \uc0ad\uc81c\ud558\uae30 \u00b6 mask &= ~(1 << p); p\ubc88 \ube44\ud2b8\ub97c \uc81c\uc678\ud558\uace0 \ubaa8\ub450 \ucf1c\uc838\uc788\ub294 \uc22b\uc790\uc640 AND \uc5f0\uc0b0 \uc6d0\uc18c \ud1a0\uae00 \u00b6 mask ^= (1 << p); \uc9d1\ud569\uc758 \ud06c\uae30 \uad6c\ud558\uae30 \u00b6 int bitcount ( int x ) { if ( x == 0 ) return 0 ; return x % 2 + bitcount ( x / 2 ); } g++\uc5d0\uc11c\ub294 __builtin_popcount(mask) \ub85c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4. \ucd5c\ud558\uc704 \uc6d0\uc18c \uad6c\ud558\uae30 \u00b6 g++\uc5d0\uc11c\ub294 __builtin_ctz(mask) \ub85c \ucd5c\ud558\uc704 \uc6d0\uc18c\uc758 \uc704\uce58\ub97c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4. int m = (mask & -mask); \ub85c \uc704\uce58 \ub300\uc2e0 \ube44\ud2b8\ub97c \uc9c1\uc811 \uad6c\ud560 \uc218 \uc788\ub2e4. 2\uc758 \ubcf4\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294, \uc74c\uc218\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ube44\ud2b8\ub97c \ub4a4\uc9d1\uace0 \uadf8 \uacb0\uacfc\uc5d0 1\uc744 \ub354\ud558\uae30 \ub54c\ubb38. \ucd5c\ud558\uc704 \uc6d0\uc18c \uc9c0\uc6b0\uae30 \u00b6 mask &= (mask - 1); \ubaa8\ub4e0 \ubd80\ubd84 \uc9d1\ud569 \uc21c\ud68c\ud558\uae30 \u00b6 for (int sub = mask; sub > 0; sub = (sub - 1) & mask) \\(sub\\) \uc5d0\uc11c 1\uc744 \ube7c\uba74 \ucf1c\uc838 \uc788\ub358 \ucd5c\ud558\uc704 \ube44\ud2b8\uac00 \uaebc\uc9c0\uace0, \uadf8 \ubc11\uc5d0 \uc788\ub294 \ube44\ud2b8\ub294 \uc804\ubd80 \ucf1c\uc9c4\ub2e4. \uc774 \uacb0\uacfc\uc640 \\(mask\\) \uc758 AND \uc5f0\uc0b0\uc73c\ub85c \ubaa8\ub4e0 \ubd80\ubd84 \uc9d1\ud569\uc744 \ubc29\ubb38\ud560 \uc218 \uc788\ub2e4.","title":"\ube44\ud2b8\ub9c8\uc2a4\ud06c"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_1","text":"AND a & b OR a | b XOR a ^ b NOT ~a \uc815\uc218 a\ub97c \uc67c\ucabd\uc73c\ub85c b\ube44\ud2b8 \uc2dc\ud504\ud2b8 a << b \uc815\uc218 a\ub97c \uc624\ub978\ucabd\uc73c\ub85c b\ube44\ud2b8 \uc2dc\ud504\ud2b8 a >> b","title":"\ube44\ud2b8 \uc5f0\uc0b0\uc790"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_2","text":"\ube44\ud2b8 \uc5f0\uc0b0\uc790\uc758 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub294 == \ub4f1 \ube44\uad50 \uc5f0\uc0b0\uc790\ubcf4\ub2e4 \uc6b0\uc120\uc21c\uc704\uac00 \ub0ae\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uad04\ud638\ub97c \uaf2d \ubd99\uc5ec\uc8fc\uc790. bool ret = ((a & b) == 5); 64\ube44\ud2b8 \uc815\uc218\uc5d0\uc11c \ube44\ud2b8 \uc5f0\uc0b0\uc744 \ud560 \ub54c \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. (1LL << 60)","title":"\uc720\uc758\ud560 \uc810"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_3","text":"int mask = (1 << N) - 1;","title":"\ube44\ud2b8 \uc804\ubd80 \ucc44\uc6b0\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_4","text":"mask |= (1 << p);","title":"\uc6d0\uc18c \ucd94\uac00\ud558\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_5","text":"if (mask & (1 << p)) \ube44\uad50 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0 ((mask & (1 << p)) == 0) \uc774\ub807\uac8c \uad04\ud638\ub85c \ubb36\uc5b4\uc8fc\uc790.","title":"\uc6d0\uc18c\uc758 \ud3ec\ud568 \uc5ec\ubd80 \ud655\uc778\ud558\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_6","text":"mask &= ~(1 << p); p\ubc88 \ube44\ud2b8\ub97c \uc81c\uc678\ud558\uace0 \ubaa8\ub450 \ucf1c\uc838\uc788\ub294 \uc22b\uc790\uc640 AND \uc5f0\uc0b0","title":"\uc6d0\uc18c \uc0ad\uc81c\ud558\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_7","text":"mask ^= (1 << p);","title":"\uc6d0\uc18c \ud1a0\uae00"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_8","text":"int bitcount ( int x ) { if ( x == 0 ) return 0 ; return x % 2 + bitcount ( x / 2 ); } g++\uc5d0\uc11c\ub294 __builtin_popcount(mask) \ub85c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4.","title":"\uc9d1\ud569\uc758 \ud06c\uae30 \uad6c\ud558\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_9","text":"g++\uc5d0\uc11c\ub294 __builtin_ctz(mask) \ub85c \ucd5c\ud558\uc704 \uc6d0\uc18c\uc758 \uc704\uce58\ub97c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4. int m = (mask & -mask); \ub85c \uc704\uce58 \ub300\uc2e0 \ube44\ud2b8\ub97c \uc9c1\uc811 \uad6c\ud560 \uc218 \uc788\ub2e4. 2\uc758 \ubcf4\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294, \uc74c\uc218\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ube44\ud2b8\ub97c \ub4a4\uc9d1\uace0 \uadf8 \uacb0\uacfc\uc5d0 1\uc744 \ub354\ud558\uae30 \ub54c\ubb38.","title":"\ucd5c\ud558\uc704 \uc6d0\uc18c \uad6c\ud558\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_10","text":"mask &= (mask - 1);","title":"\ucd5c\ud558\uc704 \uc6d0\uc18c \uc9c0\uc6b0\uae30"},{"location":"PS/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/#_11","text":"for (int sub = mask; sub > 0; sub = (sub - 1) & mask) \\(sub\\) \uc5d0\uc11c 1\uc744 \ube7c\uba74 \ucf1c\uc838 \uc788\ub358 \ucd5c\ud558\uc704 \ube44\ud2b8\uac00 \uaebc\uc9c0\uace0, \uadf8 \ubc11\uc5d0 \uc788\ub294 \ube44\ud2b8\ub294 \uc804\ubd80 \ucf1c\uc9c4\ub2e4. \uc774 \uacb0\uacfc\uc640 \\(mask\\) \uc758 AND \uc5f0\uc0b0\uc73c\ub85c \ubaa8\ub4e0 \ubd80\ubd84 \uc9d1\ud569\uc744 \ubc29\ubb38\ud560 \uc218 \uc788\ub2e4.","title":"\ubaa8\ub4e0 \ubd80\ubd84 \uc9d1\ud569 \uc21c\ud68c\ud558\uae30"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%201062%EB%B2%88%20%EA%B0%80%EB%A5%B4%EC%B9%A8/","text":"\ubb38\uc81c \ub9c1\ud06c \ubb38\uc790\uc5f4\uc744 \ud558\ub098\ud558\ub098 \ub2e4 \ub9cc\ub4e4\uc5b4\uc11c \ube44\uad50\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4. \uc5b4\ub5a4 \uae00\uc790\ub97c \ubc30\uc6e0\ub294\uc9c0 \ube44\ud2b8 \ub85c \ud45c\ud604\ud55c\ub2e4. i \ubc88\uc9f8 \uae00\uc790\ub97c \ubc30\uc6b4\ub2e4\ub294 \uac83\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. int cur = cur | ( 1 << i ); \uc9c0\uae08\uae4c\uc9c0 \ubc30\uc6b4 \uae00\uc790\ub4e4 cur \ub85c \ub2e8\uc5b4 x \ub97c \uc77d\uc744 \uc218 \uc788\ub294\uc9c0 \uc5b4\ub5bb\uac8c \uc54c \uc218 \uc788\uc744\uae4c? if ((( cur ^ x ) & x ) == 0 ) can ++ ; xor \uc5f0\uc0b0\uc744 \ud1b5\ud574 \uc9c0\uae08\uae4c\uc9c0 \ubc30\uc6b4 \uae00\uc790\uc640 \ub2e8\uc5b4\uc5d0 \ud3ec\ud568\ub41c \uae00\uc790 \uc911 \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uae00\uc790\ub97c \ucc3e\uace0, \uc774 \uae00\uc790\uac00 x\uc5d0 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 \ub2e8\uc5b4\ub97c \uc77d\uc744 \uc218 \uc5c6\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int n , k ; int ans = 0 ; vector < int > v ; void solve ( int cur , int cnt , int idx ) { if ( cnt == k ) { int can = 0 ; for ( auto x : v ) { if ((( cur ^ x ) & x ) == 0 ) can ++ ; } ans = max ( ans , can ); return ; } for ( int i = idx + 1 ; i < 26 ; i ++ ) { if ( cur & ( 1 << i )) continue ; solve ( cur | ( 1 << i ), cnt + 1 , i ); } } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) { string s ; cin >> s ; int x = 0 ; for ( auto c : s ) { x = x | ( 1 << ( c - 'a' )); } v . push_back ( x ); } if ( k < 5 ) { cout << 0 << '\\n' ; return 0 ; } int start = 0 ; string s = \"antic\" ; for ( auto c : s ) { start = start | ( 1 << ( c - 'a' )); } solve ( start , 5 , 0 ); cout << ans << '\\n' ; return 0 ; } \ubaa8\ub4e0 \ub2e8\uc5b4\uc5d0 'a', 'n', 't', 'i', 'c' \uac00 \ub4e4\uc5b4\uac00\uae30 \ub54c\ubb38\uc5d0 \ucc98\uc74c\ubd80\ud130 \uace0\ub824\ud574\uc8fc\uc5c8\ub2e4.","title":"\ubc31\uc900 1062\ubc88 \uac00\ub974\uce68"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2013489%EB%B2%88%20Vje%C5%A1tica/","text":"\ubb38\uc81c \ub9c1\ud06c \ub178\ub4dc \uac1c\uc218\ub97c \ucd5c\uc18c\ud654\uc2dc\ud0a4\uae30 \uc704\ud574 \uac01 \ub2e8\uc5b4\uac04 prefix\ub97c \ucd5c\ub300\ud55c \uacb9\uce58\uac8c \ub9cc\ub4e4\uba74 \ub41c\ub2e4. \uc21c\uc11c\ub294 \uc0c1\uad00 \uc5c6\uc73c\ubbc0\ub85c \uc54c\ud30c\ubcb3\uc758 \uac1c\uc218\ub97c \uc138\uc11c, \uacb9\uce58\ub294 \ub9cc\ud07c prefix\ub85c \ub9cc\ub4e4\uc790. \ub2e8\uc5b4\uac00 \ucd5c\ub300 16\uac1c\uc774\ubbc0\ub85c, \ub2e8\uc5b4 \uc0ac\uc6a9 \uc5ec\ubd80\ub97c bit\ub85c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. \\(dp[mask]\\) \ub294 \\(mask\\) \uc5d0 \ud574\ub2f9\ud558\ub294 \ub2e8\uc5b4\ub4e4\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294 Trie\uc758 \ucd5c\uc18c \ub178\ub4dc\uc758 \uc218 \ub77c\uace0 \uc815\uc758\ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \uc810\ud654\uc2dd\uc744 \uc138\uc6b8 \uc218 \uc788\ub2e4. \\(dp[mask] = min(dp[mask], dp[sub] + dp[mask \\oplus sub] - cnt)\\) \\(sub\\) \ub294 \ud604\uc7ac \uc120\ud0dd\ud55c \ub2e8\uc5b4\ub4e4\uc758 \ubd80\ubd84\uc9d1\ud569\uc774\uace0, \\(cnt\\) \ub294 \ud604\uc7ac \uc120\ud0dd\ud55c \ub2e8\uc5b4\ub4e4\uc758 \ucd5c\ub300 prefix \uae38\uc774\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int N , cache [ 1 << 16 ], sz [ 16 ], words [ 16 ][ 26 ]; string s [ 16 ]; int get_cnt ( int mask ) { vector < int > acnt ( 26 , 2e9 ); for ( int i = 0 ; i < 16 ; i ++ ) { if (( mask & ( 1 << i )) == 0 ) continue ; for ( int j = 0 ; j < 26 ; j ++ ) { acnt [ j ] = min ( acnt [ j ], words [ i ][ j ]); } } int ret = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { ret += acnt [ i ]; } return ret ; } int solve ( int mask ) { int & ret = cache [ mask ]; if ( ret != -1 ) return ret ; int cnt = get_cnt ( mask ); if ((( mask -1 ) & mask ) == 0 ) return ret = cnt ; ret = 2e9 ; // iterate through all of its submasks for ( int sub = ( mask -1 ) & mask ; sub > 0 ; sub = ( sub -1 ) & mask ) { ret = min ( ret , solve ( sub ) + solve ( mask ^ sub ) - cnt ); } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> N ; for ( int i = 0 ; i < N ; i ++ ) { cin >> s [ i ]; for ( auto c : s [ i ]) { words [ i ][ c - 'a' ] ++ ; } } memset ( cache , -1 , sizeof ( cache )); cout << solve (( 1 << N ) -1 ) + 1 << '\\n' ; return 0 ; } \uc8fc\uc5b4\uc9c4 \\(mask\\) \uc5d0\uc11c \ubaa8\ub4e0 \\(submask\\) \ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\uc57c \ud55c\ub2e4. \ube44\ud2b8\ub9c8\uc2a4\ud06c \uc5d0\uc11c \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uc790.","title":"\ubc31\uc900 13489\ubc88 Vje\u0161tica"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2017297%EB%B2%88%20Messi%20Gimossi/","text":"\ubb38\uc81c \ub9c1\ud06c \\(M\\) \uc774 \ucd5c\ub300 \\(2^{30}-1\\) \uc774\ubbc0\ub85c \uc644\uc804\ud0d0\uc0c9\uc744 \ub3cc\ub9b4 \uc21c \uc5c6\ub2e4. \\(messi(N)\\) \uc740 \\(messi(N-1)\\) \ub4a4\uc5d0 \\(messi(N-2)\\) \ub97c \uc774\uc5b4 \ubd99\uc778 \ubb38\uc790\uc5f4\uc774\ub2e4. \ub530\ub77c\uc11c \uc8fc\uc5b4\uc9c4 \\(m\\) \ubcf4\ub2e4 \ud070 \\(messi(N)\\) \uc744 \ucc3e\uace0, \\(M\\) \ubc88\uc9f8 \uae00\uc790\uac00 \\(messi(N-1)\\) \uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uc9c0 \\(messi(N-2)\\) \uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. \uadf8\ub807\uac8c \\(M\\) \uacfc \\(N\\) \uc744 \uc904\uc5ec \ub098\uac08 \uc218 \uc788\ub2e4. \uacf5\ubc31\uc744 \ub9cc\ub098\uba74 \ucd9c\ub825\ud558\uace0 \ubc14\ub85c \uc885\ub8cc\ud55c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); ll m ; cin >> m ; vector < ll > messi = { 5 , 13 }; for ( int i = 2 ; i < 50 ; i ++ ) { ll next = messi [ i -1 ] + messi [ i -2 ] + 1 ; messi . emplace_back ( next ); } int idx = lower_bound ( messi . begin (), messi . end (), m ) - messi . begin (); while ( idx != 0 && idx != 1 ) { if ( m <= messi [ idx -1 ]) { idx -- ; } else if ( m == messi [ idx -1 ] + 1 ) { cout << \"Messi Messi Gimossi \\n \" ; return 0 ; } else { m -= ( messi [ idx -1 ] + 1 ); idx -= 2 ; } } string s = \"Messi Gimossi\" ; m -- ; char c = s [ m ]; if ( c == ' ' ) cout << \"Messi Messi Gimossi \\n \" ; else cout << c << '\\n' ; return 0 ; } \uba54\uc2dc\uc758 2022 \uc6d4\ub4dc\ucef5 \uc6b0\uc2b9\uc744 \ucd95\ud558\ud569\ub2c8\ub2e4.","title":"\ubc31\uc900 17297\ubc88 Messi Gimossi"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2023741%EB%B2%88%20%EC%95%BC%EB%B0%94%EC%9C%84%20%EA%B2%8C%EC%9E%84/","text":"\ubb38\uc81c \ub9c1\ud06c \ud55c \uac04\uc120\uc744 \uc5ec\ub7ec \ubc88 \ud0c8 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uace0 \ud574\uc11c \uc9c4\uc9dc \uc5ec\ub7ec \ubc88 \ud0c0\uba74 \uc2dc\uac04\ucd08\uacfc\ub97c \ubc1b\ub294\ub2e4. \ud574\ub2f9 \uc815\uc810\uc5d0 \ud640\uc218 \ubc88 \uc774\ub3d9\ud574\uc11c \ub3c4\ucc29\ud588\ub294\uc9c0, \uc9dd\uc218 \ubc88 \uc774\ub3d9\ud574\uc11c \ub3c4\ucc29\ud588\ub294\uc9c0 \ub9cc \uae30\ub85d\ud55c\ub2e4. 2\ubc88 \uc6c0\uc9c1\uc5ec\uc11c \ub3c4\ub2ec\ud55c \uc815\uc810\uc740 \ubb34\uc870\uac74 4\ubc88, 6\ubc88 \uc6c0\uc9c1\uc5ec\uc11c \ub3c4\ub2ec\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub0e5 \uac04\uc120 \ud558\ub098 \uc7a1\uace0 \uc640\ub9ac\uac00\ub9ac \ud558\uba74 \ub418\ub2c8\uae4c. #include <bits/stdc++.h> using namespace std ; using ll = long long ; using ld = long double ; int N , M , X , Y ; vector < vector < int >> adj ; bool visited [ 2 ][ 1001 ]; void dfs ( int cur , int cnt ) { visited [ cnt % 2 ][ cur ] = true ; for ( auto next : adj [ cur ]) { if ( visited [( cnt + 1 ) % 2 ][ next ]) continue ; dfs ( next , cnt + 1 ); } } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> N >> M >> X >> Y ; adj . resize ( N + 1 ); for ( int i = 0 ; i < M ; i ++ ) { int a , b ; cin >> a >> b ; adj [ a ]. emplace_back ( b ); adj [ b ]. emplace_back ( a ); } if ( adj [ X ]. empty ()) { cout << -1 ; return 0 ; } dfs ( X , 0 ); vector < int > ans ; for ( int i = 1 ; i <= N ; i ++ ) { if ( visited [ Y % 2 ][ i ]) ans . emplace_back ( i ); } for ( auto x : ans ) { cout << x << ' ' ; } return 0 ; }","title":"\ubc31\uc900 23741\ubc88 \uc57c\ubc14\uc704 \uac8c\uc784"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2024229%EB%B2%88%20%EB%AA%A8%EB%91%90%EC%8B%B8%EC%9D%B8%20%EC%B6%9C%EA%B7%BC%EA%B8%B8/","text":"\ud310\uc790\ub97c \uc785\ub825\ubc1b\uace0, \uc815\ub82c\ud558\uace0, \uacb9\uce58\ub294 \ud310\uc790\ub07c\ub9ac \uc774\uc5b4\ubd99\uc778\ub2e4. \uc774 \ub54c \uc2e4\uc218\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758. \ub9c8\uc9c0\ub9c9 \ud310\uc790\uc758 \uc885\ub8cc \uc9c0\uc810\ubcf4\ub2e4 \uc0c8\ub85c\uc6b4 \ud310\uc790\uc758 \uc2dc\uc791 \uc9c0\uc810\uc774 \uc55e\uc120\ub2e4\uba74 \ud310\uc790\uac00 \uacb9\uce58\ub294 \uac83\uc774\ub2e4. \ud310\uc790\uac00 \uacb9\uce5c\ub2e4\uba74 \ud310\uc790\uc758 \uc885\ub8cc \uc9c0\uc810\uc744 \ub450 \ud310\uc790 \uc911 \ub354 \uba40\ub9ac \uc788\ub294 \ud310\uc790\uc758 \uc885\ub8cc \uc9c0\uc810\uc73c\ub85c \uc124\uc815\ud574\uc57c \ud55c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; using ld = long double ; int N , cache [ 200000 ]; vector < pair < int , int >> v ; int solve ( int cur ) { int & ret = cache [ cur ]; if ( ret != -1 ) return ret ; ret = v [ cur ]. second ; int i = 0 , cnt = v [ cur ]. second - v [ cur ]. first ; while ( ++ i ) { if ( cur + i >= v . size () || v [ cur + i ]. first > v [ cur ]. second + cnt ) break ; ret = max ( ret , solve ( cur + i )); } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> N ; vector < pair < int , int >> tmp ( N ); for ( auto & [ a , b ] : tmp ) { cin >> a >> b ; } sort ( tmp . begin (), tmp . end ()); for ( int i = 0 ; i < N ; i ++ ) { if ( v . size () && v [ v . size () -1 ]. second >= tmp [ i ]. first ) { v [ v . size () -1 ]. second = max ( v [ v . size () -1 ]. second , tmp [ i ]. second ); } else v . emplace_back ( tmp [ i ]); } memset ( cache , -1 , sizeof ( cache )); cout << solve ( 0 ); return 0 ; }","title":"\ubc31\uc900 24229\ubc88 \ubaa8\ub450\uc2f8\uc778 \ucd9c\uadfc\uae38"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2025949%EB%B2%88%20Jar%20Game/","text":"\ubb38\uc81c \ub9c1\ud06c \\(a, b, c\\) \ubc88 \ud56d\uc544\ub9ac\uc5d0 \ub0a8\uc544\uc788\ub294 \uc870\uc57d\ub3cc\uc758 \uac1c\uc218\uc640 \ud604\uc7ac \ud134 \uc73c\ub85c \uc0c1\ud0dc\uacf5\uac04 \uc815\uc758. \\(1 \\le a, b, c \\le 100\\) \uc774\ubbc0\ub85c \ud134\uc774 \ubcc4\ub85c \ucee4\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \uc801\ub2f9\ud788 30\uc815\ub3c4\ub85c \uc7a1\uc73c\uba74 \ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\ub2e4. ( \\(\\sum_{i=1}^{30} \\ge a+b+c\\) ) #include <bits/stdc++.h> using namespace std ; using ll = long long ; using ld = long double ; pair < int , int > cache [ 101 ][ 101 ][ 101 ][ 30 ]; pair < int , int > solve ( int a , int b , int c , int turn ) { // \ud640\uc218\ud134 F, \uc9dd\uc218\ud134 S if ( ! a && ! b && ! c ) return { 0 , 0 }; pair < int , int >& ret = cache [ a ][ b ][ c ][ turn ]; if ( ret != make_pair ( -1 , -1 )) return ret ; vector < pair < int , int >> rets ; if ( a ) { pair < int , int > tmp = solve ( max ( 0 , a - turn ), b , c , turn + 1 ); turn % 2 ? tmp . first += min ( a , turn ) : tmp . second += min ( a , turn ); rets . push_back ( tmp ); } if ( b ) { pair < int , int > tmp = solve ( a , max ( 0 , b - turn ), c , turn + 1 ); turn % 2 ? tmp . first += min ( b , turn ) : tmp . second += min ( b , turn ); rets . push_back ( tmp ); } if ( c ) { pair < int , int > tmp = solve ( a , b , max ( 0 , c - turn ), turn + 1 ); turn % 2 ? tmp . first += min ( c , turn ) : tmp . second += min ( c , turn ); rets . push_back ( tmp ); } pair < int , int > ans = { 0 , 0 }; for ( auto & p : rets ) { if ( turn % 2 ) { if ( p . first > ans . first ) ans = p ; } else { if ( p . second > ans . second ) ans = p ; } } return ret = ans ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int a , b , c ; cin >> a >> b >> c ; fill ( & cache [ 0 ][ 0 ][ 0 ][ 0 ], & cache [ 100 ][ 100 ][ 100 ][ 30 ], make_pair ( -1 , -1 )); auto [ f , s ] = solve ( a , b , c , 1 ); // cout << \"F: \" << f << '\\n'; // cout << \"S: \" << s << '\\n'; if ( f > s ) cout << \"F\" ; else if ( f < s ) cout << \"S\" ; else cout << \"D\" ; return 0 ; } game dp\uc5d0 \ub300\ud574 \ub354 \uacf5\ubd80\ud574\ubd10\uc57c\uaca0\ub2e4. 2022 ICPC \uc608\uc120\ubb38\uc81c\uc778\ub370 \ub0b4\ub144 ICPC \uaf2d \ub098\uac00\uc57c\uc9c0!","title":"\ubc31\uc900 25949\ubc88 Jar Game"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%2025953%EB%B2%88%20%ED%85%9C%ED%8F%AC%EB%9F%B4%20%EA%B7%B8%EB%9E%98%ED%94%84/","text":"\ubb38\uc81c \ub9c1\ud06c \ubb38\uc81c\uc5d0 \uc801\ud600\uc788\ub294 \ub300\ub85c, \uac01 \\(T\\) \ub9c8\ub2e4 \uac04\uc120 \uc644\ud654\ub97c \ub531 \ud55c \ubc88 \ud560 \uc218 \uc788\ub2e4. \ub54c\ubb38\uc5d0 dist \ubc30\uc5f4\uc744 \ud558\ub098\ub9cc \ub193\uace0 \uc4f0\uba74 \uc548\ub418\uace0, \uac01 \\(T\\) \ub9c8\ub2e4 \ub530\ub85c \ub193\uace0 \uc368\uc57c\ud55c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int n , t , m , s , e ; int dist [ 10000 ]; vector < vector < pair < int , int >>> adj [ 1000 ]; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> n >> t >> m >> s >> e ; for ( int i = 0 ; i < t ; i ++ ) { adj [ i ]. resize ( n ); for ( int j = 0 ; j < m ; j ++ ) { int a , b , c ; cin >> a >> b >> c ; adj [ i ][ a ]. emplace_back ( b , c ); adj [ i ][ b ]. emplace_back ( a , c ); } } fill ( dist , dist + 10000 , 1e9 ); dist [ s ] = 0 ; for ( int i = 0 ; i < t ; i ++ ) { int tmp [ 10000 ]; copy ( dist , dist + 10000 , tmp ); for ( int j = 0 ; j < n ; j ++ ) { if ( dist [ j ] == 1e9 ) continue ; for ( auto [ next , cost ] : adj [ i ][ j ]) { if ( dist [ next ] > dist [ j ] + cost ) { tmp [ next ] = dist [ j ] + cost ; } } } copy ( tmp , tmp + 10000 , dist ); } if ( dist [ e ] == 1e9 ) cout << -1 ; else cout << dist [ e ]; return 0 ; } \uc57d\uac04 \ubca8\ub9cc \ud3ec\ub4dc \ub290\ub08c\uc774\ub2e4. \uadf8\ub798\ud504 \ucd5c\ub2e8\uacbd\ub85c \uc54c\uace0\ub9ac\uc998 \uc815\ub9ac \uc5d0\uc11c \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uc790. \uc774\ub807\uac8c \uc778\uc811 \ub9ac\uc2a4\ud2b8\ub85c \uc785\ub825\ubc1b\ub294 \ubc29\uc2dd \ub9d0\uace0, \uac04\uc120\ub9cc \ub530\ub85c \uc785\ub825\ubc1b\uc544\ub3c4 \uc0c1\uad00 X.","title":"\ubc31\uc900 25953\ubc88 \ud15c\ud3ec\ub7f4 \uadf8\ub798\ud504"},{"location":"PS/BOJ/%EB%B0%B1%EC%A4%80%202629%EB%B2%88%20%EC%96%91%ED%8C%94%EC%A0%80%EC%9A%B8/","text":"\ubb38\uc81c \ub9c1\ud06c DP \ubb38\uc81c\ub2e4. \ubb38\uc81c\ub97c \ub2e8\uc21c\ud654\ud574\uc11c, \uad6c\uc2ac\uc740 \ud56d\uc0c1 \uc800\uc6b8\uc758 \uc67c\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \uc0dd\uac01\ud574\ubcf4\uc790. \uc774 \ub54c \ucd94\ub97c \uc624\ub978\ucabd\uc5d0 \ub193\uc73c\uba74 \uad6c\uc2ac\uc758 \ubb34\uac8c\uac00 \uc62c\ub77c\uac00\uc57c\ud558\uace0, \ucd94\ub97c \uc67c\ucabd\uc5d0 \ub193\uc740 \uad6c\uc2ac\uc758 \ubb34\uac8c\uac00 \ub0b4\ub824\uac00\uc57c\ud55c\ub2e4. \uc774 \ub450 \uac00\uc9c0 \uacbd\uc6b0\uc5d0 \ub300\ud574 \uacc4\uc0b0\ud574\uc8fc\uba74 \ub41c\ub2e4. \uc74c\uc218 \ubb34\uac8c\ub3c4 \ub9cc\ub4e4\uc218 \uc788\ub2e4 \uace0 \uac00\uc815\ud574\uc57c \ubb38\uc81c\ub97c \ud480 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0 \ub354 \ud070 \ucd94\ub97c \uc624\ub978\ucabd\uc5d0 \ub193\uc544\uc11c \uacb0\uad6d \uc591\uc218\uac00 \ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4 #include <bits/stdc++.h> using namespace std ; using ll = long long ; constexpr int MAX = 15001 ; bool dp [ 30 ][ 30005 ]; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n , m ; cin >> n ; vector < int > v ( n ); for ( auto & x : v ) { cin >> x ; } cin >> m ; vector < int > cv ( m ); for ( auto & x : cv ) { cin >> x ; } dp [ 0 ][ MAX + v [ 0 ]] = 1 ; dp [ 0 ][ MAX - v [ 0 ]] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ][ MAX + v [ i ]] = 1 ; dp [ i ][ MAX - v [ i ]] = 1 ; for ( int j = 0 ; j <= 30003 ; j ++ ) { dp [ i ][ j ] += dp [ i -1 ][ j ]; if ( j >= v [ i ]) { dp [ i ][ j - v [ i ]] += dp [ i -1 ][ j ]; dp [ i ][ j ] += dp [ i -1 ][ j - v [ i ]]; } } } for ( auto x : cv ) { if ( x >= MAX ) cout << \"N \" ; else if ( dp [ n -1 ][ x + MAX ]) cout << \"Y \" ; else cout << \"N \" ; } return 0 ; } \uac00\uc6b4\ub370 MAX\ub97c \uae30\uc900\uc73c\ub85c \uc591\uc218, \uc74c\uc218\ub97c \ub098\ub208\ub2e4. \ucd94 30\uac1c\uc5d0 \ub300\ud574 \uc804\ubd80 \ub2e4\uc74c\uacfc \uac19\uc774 \uacc4\uc0b0\ud55c\ub2e4. 1. \ucd94 \ud558\ub098\ub9cc \uc67c\ucabd\uc5d0 \ub193\ub294 \uacbd\uc6b0, \uc624\ub978\ucabd\uc5d0 \ub193\ub294 \uacbd\uc6b0 \uacc4\uc0b0 2. \uc9c0\uae08\uae4c\uc9c0 \ub9cc\ub4e4\uc5b4\uc9c4 \ubb34\uac8c\ub4e4\uc5d0 \ub300\ud574 \uc67c\ucabd\uc5d0 \ub193\ub294 \uacbd\uc6b0, \uc624\ub978\ucabd\uc5d0 \ub193\ub294 \uacbd\uc6b0 \uacc4\uc0b0 Knapsack DP\ub294 \ud0d1\ub2e4\uc6b4\uc73c\ub85c \ud480\uae30 \ud798\ub4e4\uace0, \ubc14\ud140\uc5c5\uc73c\ub85c \ud478\ub294\uac8c \ud6e8\uc52c \uc798 \ud480\ub9b0\ub2e4. \uc65c \uadf8\ub7f0\uc9c0\ub294 \ub2e4\uc74c\uc5d0 \ud3ec\uc2a4\ud305\ud560 \uc608\uc815\uc774\ub2e4.","title":"\ubc31\uc900 2629\ubc88 \uc591\ud314\uc800\uc6b8"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/","text":"2022\ub144 10\uc6d4 27\uc77c\uc5d0 \uc9c4\ud589\ud55c SKKU \ud504\ub85c\uadf8\ub798\ubc0d \ub300\ud68c. \ud558\ub098\uc815\ub3c4\ub294 \ub354 \ud480\uc5b4\ubcfc\ub9cc \ud588\ub294\ub370 \ub9c9\ud310\uc5d0 \uc9d1\uc911\ub825\uc744 \uc783\uace0 4\uc194.. (\uc774\ub860\uc0c1 \uc785\uc120) \uadf8\ub798\ub3c4 \uc62c\ud574 \ucd08\uc5d0 \ucc38\uac00\ud588\ub358 \ub300\ud68c\ubcf4\ub2e4\ub294 \ud55c \ubb38\uc81c \ub354 \ud480\uc5c8\ub2e4. \ub0b4\ub144\uc5d0\ub294 5\uc194 \uc774\uc0c1 \ud558\uace0 10\ub4f1 \uc548\uc5d0 \ub4e4 \uc218 \uc788\uc9c0 \uc54a\uc744\uae4c? A \uc548\ub155 \ud074\ub808\uc624\ud30c\ud2b8\ub77c \uc138\uc0c1\uc5d0\uc11c \uc81c\uc77c\uac00\ub294 \ud3ec\ud14c\uc774\ud1a0\uce69 \u00b6 \ubb38\uc81c \ub9c1\ud06c \ub0b4\uc57c \ud558\ub294 \ubaa9\uc18c\ub9ac \\(X\\) \ub97c 1\uc529 \ub298\ub9ac\uba74\uc11c \ud655\uc778\ud574\ubcf4\uba74 \ub41c\ub2e4. \\(N\\) \ubc88 \uc0ac\ub78c\uae4c\uc9c0 \ub3c4\ub2ec\ud55c \uacbd\uc6b0 1\ubc88 \uc0ac\ub78c\ubd80\ud130 \ub2e4\uc2dc \uc9c4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \uc778\ub371\uc2a4\ub97c \ubc14\uafd4\uc900\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n , x ; cin >> n >> x ; vector < int > v ( n ); for ( auto & num : v ) { cin >> num ; } int cur = 0 ; while ( 1 ) { if ( v [ cur ] < x ) { cout << cur + 1 << '\\n' ; break ; } cur ++ ; x ++ ; if ( cur == n ) cur = 0 ; } return 0 ; } B \uc7a5\uc778\uc740 \ub3c4\uad6c\ub97c \ud0d3\ud558\uc9c0 \uc54a\ub294\ub2e4 \u00b6 \ubb38\uc81c \ub9c1\ud06c \ub9dd\uce58 9\uac1c\ub97c \uc0ac\uc6a9\ud558\uba74 \ub418\uace0, \uacf1\uc148 \uc5f0\uc0b0\uc774\ubbc0\ub85c \uc21c\uc11c\uc5d0 \uad00\uacc4\uc5c6\uc774 \uac15\ud654 \ud655\ub960\uc774 \uac00\uc7a5 \ub0ae\uc740 \ub9dd\uce58\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ub9dd\uce58 9\uac1c\ub97c \uc120\ud0dd\ud558\uba74 \ub41c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; using ld = long double ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout << fixed << setprecision ( 7 ); vector < ld > v ( 10 ); for ( auto & x : v ) { cin >> x ; } sort ( v . begin (), v . end ()); ld ans = 1e9 ; for ( int i = 1 ; i < 10 ; i ++ ) { ans = ans * v [ i ] / i ; } cout << ans << '\\n' ; return 0 ; } C \uc218\ub835\uc758 \uc2dc\uac04\uc774\ub2e4! \u00b6 \ubb38\uc81c \ub9c1\ud06c \ud604\uc7ac \uac00\uc9c4 \ub3c8\uc73c\ub85c \ucc29\uc6a9\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \ubc29\uc5b4\uad6c\uc758 \uc870\ud569\uc744 \uc2dc\ub3c4\ud55c\ub2e4. \uc774 \ub54c \ubc29\uc5b4\uad6c\ub97c \ucc29\uc6a9\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0 \ub3c4 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uc785\ub825\ubc1b\uc740 \ubc29\uc5b4\uad6c\uc5d0 \uc544\ubb34\ub7f0 \ud6a8\uacfc\ub3c4 \uc5c6\uace0 \uac00\uaca9\ub3c4 0\uc778 \ub354\ubbf8 \ubc29\uc5b4\uad6c \ud55c\uac1c\uc529\uc744 \ucd94\uac00\ud574\uc8fc\uba74 \ud3b8\ud558\uac8c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \uac15\ud654\uae4c\uc9c0 \uac00\ub2a5\ud558\ub2e4\uba74, \ud604\uc7ac \ucc29\uc6a9\ud55c \ubc29\uc5b4\uad6c\uc5d0 \ub300\ud574 \uc804\ubd80 \uc2dc\ub3c4\ud574\ubcf8\ub2e4. \uc2a4\ud0ac \ub808\ubca8 \uc99d\uac00\ub7c9\uc744 \uc62c\ub9b4 \uc2a4\ud0ac\uacfc \ub0b4\ub9b4 \uc2a4\ud0ac\ub3c4 \uc804\ubd80 \uc2dc\ub3c4\ud574\ubcf8\ub2e4. \uc2e4\uc218\ud560 \uc5ec\uc9c0\uac00 \uad49\uc7a5\ud788 \ub9ce\uc740 \ubb38\uc81c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int t , k ; vector < vector < int >> skills ( 5 ); vector < vector < pair < int , vector < int >>>> items ( 3 ); int calculate ( int money , pair < int , vector < int >> & item1 , pair < int , vector < int >> & item2 , pair < int , vector < int >> & item3 ) { int tc = item1 . first + item2 . first + item3 . first ; if ( tc > money ) return -1 ; int ret = 0 ; vector < int > lv ( 5 ); for ( int i = 0 ; i < 5 ; i ++ ) { lv [ i ] = item1 . second [ i ] + item2 . second [ i ] + item3 . second [ i ]; ret += skills [ i ][ min (( int ) skills [ i ]. size () -1 , lv [ i ])]; } if ( money - k >= tc ) { for ( int i = 0 ; i < 5 ; i ++ ) { // down if ( ! lv [ i ]) continue ; lv [ i ] -- ; for ( int j = 0 ; j < 5 ; j ++ ) { // up if ( i == j ) continue ; lv [ j ] ++ ; int tmp = 0 ; for ( int k = 0 ; k < 5 ; k ++ ) { tmp += skills [ k ][ min (( int ) skills [ k ]. size () -1 , lv [ k ])]; } ret = max ( ret , tmp ); lv [ j ] -- ; } lv [ i ] ++ ; } } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> t >> k ; for ( auto & v : skills ) { int sz ; cin >> sz ; v . push_back ( 0 ); for ( int i = 0 ; i < sz ; i ++ ) { int x ; cin >> x ; v . push_back ( x ); } } for ( auto & v : items ) { int sz ; cin >> sz ; v . resize ( sz + 1 ); v [ 0 ]. first = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { v [ 0 ]. second . push_back ( 0 ); } for ( int i = 1 ; i <= sz ; i ++ ) { cin >> v [ i ]. first ; } for ( int i = 1 ; i <= sz ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { int x ; cin >> x ; v [ i ]. second . push_back ( x ); } } } int ans = 0 ; for ( int i = 0 ; i < items [ 0 ]. size (); i ++ ) { for ( int j = 0 ; j < items [ 1 ]. size (); j ++ ) { for ( int k = 0 ; k < items [ 2 ]. size (); k ++ ) { ans = max ( ans , calculate ( t , items [ 0 ][ i ], items [ 1 ][ j ], items [ 2 ][ k ])); } } } cout << ans << '\\n' ; return 0 ; } D \uc591\uacfc \ub291\ub300 \u00b6 \ubb38\uc81c \ub9c1\ud06c \uccab \ubc88\uc9f8 \ub0a0\uc5d0\ub294 \ud56d\uc0c1 \uc591\uc774 \ub3c4\ucc29\ud558\uace0, \ub9c8\uc9c0\ub9c9 \ub0a0\uc5d0\ub294 \ud56d\uc0c1 \ub291\ub300\uc758 \uc218\uac00 \uc591\uc758 \uc218\ubcf4\ub2e4 \ub9ce\uace0, \ud558\ub8e8\uc5d0 \ub291\ub300 \ud639\uc740 \uc591\uc774 \ud55c \ub9c8\ub9ac\uc529 \ub3c4\ucc29\ud558\uae30 \ub54c\ubb38\uc5d0 1\ubc88\uc9f8 \ub0a0\ubd80\ud130 \\(N\\) \ubc88\uc9f8 \ub0a0\uc911 \uc801\uc5b4\ub3c4 \ud558\ub8e8 \uc774\uc0c1 \ub291\ub300\uc640 \uc591\uc758 \uc218\uac00 \uac19\uc544\uc9c4\ub2e4. - \\(lo <= hi\\) \uc774\uace0, \\(mid = (lo+hi)/2\\) \ub77c \ud558\uc790. - \\(mid\\) \ubc88\uc9f8 \ub0a0\uc5d0 \uc591\uacfc \ub291\ub300\uc758 \uc218\uac00 \uac19\ub2e4\uba74 \\(mid\\) \ubc88\uc9f8 \ub0a0\uc774 \uc815\ub2f5\uc774\ub2e4. - \\(mid\\) \ubc88\uca30 \ub0a0\uc5d0 \uc591\uc774 \ub354 \ub9ce\ub2e4\uba74, \\(mid+1\\) \ubc88\uc9f8 \ub0a0\uacfc \\(hi\\) \ubc88\uc9f8 \ub0a0 \uc0ac\uc774\uc5d0 \uc815\ub2f5\uc774 \uc874\uc7ac\ud55c\ub2e4. - \\(mid\\) \ubc88\uc9f8 \ub0a0\uc5d0 \ub291\ub300\uac00 \ub354 \ub9ce\ub2e4\uba74 \\(lo\\) \ubc88\uc9f8 \ub0a0\uacfc \\(mid-1\\) \ubc88\uc9f8 \ub0a0 \uc0ac\uc774\uc5d0 \uc815\ub2f5\uc774 \uc874\uc7ac\ud55c\ub2e4. \uc778\ud130\ub799\ud2f0\ube0c \ubb38\uc81c\ub77c \ucd9c\ub825 \uc774\ud6c4 \ubc84\ud37c\ub97c flush \ud574\uc57c \ud55c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n ; cin >> n ; int lo = 1 , hi = n , cnt ; while ( lo <= hi ) { int mid = ( lo + hi ) / 2 ; cout << \"? \" << mid << endl ; cin >> cnt ; if ( cnt * 2 > mid ) lo = mid + 1 ; else if ( cnt * 2 < mid ) hi = mid - 1 ; else { cout << \"! \" << mid << endl ; break ; } } return 0 ; } E \uc218\uc5f4\uc758 \ud569 \u00b6 \ubb38\uc81c \ub9c1\ud06c \\(\\sum_{i=S}^{T}{a_i}\\) \ub294 \\(\\sum_{i=1}^{T}{a_i}\\) - \\(\\sum_{i=1}^{S-1}{a_i}\\) \uc774\ubbc0\ub85c \\(\\sum_{i=1}^{N}{a_i}\\) \uc744 \uad6c\ud558\uba74 \ub41c\ub2e4. \uc5b4\ub5a4 \uc591\uc758 \uc815\uc218 \\(d\\) \ub294 \\(\\sum_{i=1}^{N}{a_i}\\) \uc5d0 \\(1\\) \uacfc \\(N\\) \uc0ac\uc774\uc5d0 \uc874\uc7ac\ud558\ub294 \\(d\\) \uc758 \ubc30\uc218\uc758 \uac1c\uc218\ub9cc\ud07c \uae30\uc5ec\ud55c\ub2e4. \ud640\uc218\uc774\uba74 \\((-1) \\times \\lfloor \\frac{N}{d} \\rfloor\\) \ub9cc\ud07c, \uc9dd\uc218\uc774\uba74 \\((1) \\times \\lfloor \\frac{N}{d} \\rfloor\\) \ub9cc\ud07c \uae30\uc5ec\ud55c\ub2e4. \ubc30\uc218\ub97c \uc77c\uc77c\ud788 \uad6c\ud558\uba74 \uc2dc\uac04 \ucd08\uacfc\ub97c \ubc1b\uc744 \uc218 \uc788\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int solve ( int n ) { int ret = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = ( i % 2 ) ? -1 : 1 ; ret += ( n / i ) * x ; } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int s , t ; cin >> s >> t ; cout << solve ( t ) - solve ( s -1 ) << '\\n' ; return 0 ; } F \uc218\ud655\uc758 \uacc4\uc808\uc774\ub2e4! \u00b6 \ubb38\uc81c \ub9c1\ud06c \\(x\\) \ub97c \uace0\uc815\uc2dc\ucf1c \ub193\uace0, \uc8fc\uc5b4\uc9c4 \uc785\ub825\uc744 \ub530\ub77c\uac00\uba74 \ucd1d \uba87 \uac1c\uc758 \uc791\ubb3c\uc744 \uc218\ud655\ud560 \uc218 \uc788\ub294\uc9c0 \ub098\uc628\ub2e4. Parametric Search \uac00\ub2a5. \uc138\ud2b8 \uc218 \\(\\times\\) \uc9c4\ud589 \ud69f\uc218 \\(= M\\) \uc774 \ucd5c\ub300 \\(1,000,000\\) \uc774\ubbc0\ub85c \ub9e4\ubc88 \uae38\uc744 \ub530\ub77c\uac00\uba74 \uc2dc\uac04 \ucd08\uacfc\ub97c \ubc1b\uac8c \ub418\uace0, \ubbf8\ub9ac \uc88c\ud45c\ub9c8\ub2e4 \uc5b8\uc81c \ub3c4\ucc29\ud558\ub294\uc9c0 \uc804\ucc98\ub9ac\ub97c \ud560 \ud544\uc694\uac00 \uc788\ub2e4. \\(-1,000,000 \\le x \\le 1,000,000, -1,000,000 \\le y \\le 1,000,000\\) \ub77c\uc11c 2\ucc28\uc6d0 \ubc30\uc5f4\uc744 \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. map \uc5d0 \uc88c\ud45c\uc640 \ubc29\ubb38 \uc2dc\uc810\uc744 \uae30\ub85d\ud55c\ub2e4. \ub9e4\ubc88 2\ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uae30\ub85d\ud588\ub294\ub370 map \uc744 \uc4f0\ub294 \ubc29\uc2dd\ub3c4 \uc54c\uc544\ub46c\uc57c\uaca0\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n , k ; cin >> n >> k ; vector < pair < char , int >> v ( n ); for ( auto & [ a , b ] : v ) { cin >> a >> b ; } map < pair < int , int > , vector < int >> m ; map < char , pair < int , int >> mm ; mm [ 'N' ] = { 1 , 0 }; mm [ 'S' ] = { -1 , 0 }; mm [ 'E' ] = { 0 , 1 }; mm [ 'W' ] = { 0 , -1 }; int y = 0 , x = 0 , t = 0 ; for ( auto & [ a , b ] : v ) { auto & [ dy , dx ] = mm [ a ]; for ( int i = 0 ; i < b ; i ++ ) { y += dy ; x += dx ; m [{ y , x }]. emplace_back ( ++ t ); } } int lo = 0 , hi = 1000000 ; while ( lo <= hi ) { int cnt = 0 ; int mid = ( lo + hi ) / 2 ; for ( auto & [ p , v ] : m ) { for ( int i = 0 ; i < v . size () -1 ; i ++ ) { for ( int j = i + 1 ; j < v . size (); j ++ ) { if ( v [ j ] - v [ i ] < mid ) continue ; else { cnt ++ ; i = j -1 ; break ; } } } } if ( cnt < k ) hi = mid - 1 ; else lo = mid + 1 ; } cout << hi << '\\n' ; return 0 ; }","title":"2022 SKKU \ud504\ub85c\uadf8\ub798\ubc0d \ub300\ud68c in \uc18c\ud504\ud2b8\uc758 \ubc24"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#a","text":"\ubb38\uc81c \ub9c1\ud06c \ub0b4\uc57c \ud558\ub294 \ubaa9\uc18c\ub9ac \\(X\\) \ub97c 1\uc529 \ub298\ub9ac\uba74\uc11c \ud655\uc778\ud574\ubcf4\uba74 \ub41c\ub2e4. \\(N\\) \ubc88 \uc0ac\ub78c\uae4c\uc9c0 \ub3c4\ub2ec\ud55c \uacbd\uc6b0 1\ubc88 \uc0ac\ub78c\ubd80\ud130 \ub2e4\uc2dc \uc9c4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \uc778\ub371\uc2a4\ub97c \ubc14\uafd4\uc900\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n , x ; cin >> n >> x ; vector < int > v ( n ); for ( auto & num : v ) { cin >> num ; } int cur = 0 ; while ( 1 ) { if ( v [ cur ] < x ) { cout << cur + 1 << '\\n' ; break ; } cur ++ ; x ++ ; if ( cur == n ) cur = 0 ; } return 0 ; }","title":"A \uc548\ub155 \ud074\ub808\uc624\ud30c\ud2b8\ub77c \uc138\uc0c1\uc5d0\uc11c \uc81c\uc77c\uac00\ub294 \ud3ec\ud14c\uc774\ud1a0\uce69"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#b","text":"\ubb38\uc81c \ub9c1\ud06c \ub9dd\uce58 9\uac1c\ub97c \uc0ac\uc6a9\ud558\uba74 \ub418\uace0, \uacf1\uc148 \uc5f0\uc0b0\uc774\ubbc0\ub85c \uc21c\uc11c\uc5d0 \uad00\uacc4\uc5c6\uc774 \uac15\ud654 \ud655\ub960\uc774 \uac00\uc7a5 \ub0ae\uc740 \ub9dd\uce58\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ub9dd\uce58 9\uac1c\ub97c \uc120\ud0dd\ud558\uba74 \ub41c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; using ld = long double ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout << fixed << setprecision ( 7 ); vector < ld > v ( 10 ); for ( auto & x : v ) { cin >> x ; } sort ( v . begin (), v . end ()); ld ans = 1e9 ; for ( int i = 1 ; i < 10 ; i ++ ) { ans = ans * v [ i ] / i ; } cout << ans << '\\n' ; return 0 ; }","title":"B \uc7a5\uc778\uc740 \ub3c4\uad6c\ub97c \ud0d3\ud558\uc9c0 \uc54a\ub294\ub2e4"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#c","text":"\ubb38\uc81c \ub9c1\ud06c \ud604\uc7ac \uac00\uc9c4 \ub3c8\uc73c\ub85c \ucc29\uc6a9\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \ubc29\uc5b4\uad6c\uc758 \uc870\ud569\uc744 \uc2dc\ub3c4\ud55c\ub2e4. \uc774 \ub54c \ubc29\uc5b4\uad6c\ub97c \ucc29\uc6a9\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0 \ub3c4 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uc785\ub825\ubc1b\uc740 \ubc29\uc5b4\uad6c\uc5d0 \uc544\ubb34\ub7f0 \ud6a8\uacfc\ub3c4 \uc5c6\uace0 \uac00\uaca9\ub3c4 0\uc778 \ub354\ubbf8 \ubc29\uc5b4\uad6c \ud55c\uac1c\uc529\uc744 \ucd94\uac00\ud574\uc8fc\uba74 \ud3b8\ud558\uac8c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \uac15\ud654\uae4c\uc9c0 \uac00\ub2a5\ud558\ub2e4\uba74, \ud604\uc7ac \ucc29\uc6a9\ud55c \ubc29\uc5b4\uad6c\uc5d0 \ub300\ud574 \uc804\ubd80 \uc2dc\ub3c4\ud574\ubcf8\ub2e4. \uc2a4\ud0ac \ub808\ubca8 \uc99d\uac00\ub7c9\uc744 \uc62c\ub9b4 \uc2a4\ud0ac\uacfc \ub0b4\ub9b4 \uc2a4\ud0ac\ub3c4 \uc804\ubd80 \uc2dc\ub3c4\ud574\ubcf8\ub2e4. \uc2e4\uc218\ud560 \uc5ec\uc9c0\uac00 \uad49\uc7a5\ud788 \ub9ce\uc740 \ubb38\uc81c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int t , k ; vector < vector < int >> skills ( 5 ); vector < vector < pair < int , vector < int >>>> items ( 3 ); int calculate ( int money , pair < int , vector < int >> & item1 , pair < int , vector < int >> & item2 , pair < int , vector < int >> & item3 ) { int tc = item1 . first + item2 . first + item3 . first ; if ( tc > money ) return -1 ; int ret = 0 ; vector < int > lv ( 5 ); for ( int i = 0 ; i < 5 ; i ++ ) { lv [ i ] = item1 . second [ i ] + item2 . second [ i ] + item3 . second [ i ]; ret += skills [ i ][ min (( int ) skills [ i ]. size () -1 , lv [ i ])]; } if ( money - k >= tc ) { for ( int i = 0 ; i < 5 ; i ++ ) { // down if ( ! lv [ i ]) continue ; lv [ i ] -- ; for ( int j = 0 ; j < 5 ; j ++ ) { // up if ( i == j ) continue ; lv [ j ] ++ ; int tmp = 0 ; for ( int k = 0 ; k < 5 ; k ++ ) { tmp += skills [ k ][ min (( int ) skills [ k ]. size () -1 , lv [ k ])]; } ret = max ( ret , tmp ); lv [ j ] -- ; } lv [ i ] ++ ; } } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cin >> t >> k ; for ( auto & v : skills ) { int sz ; cin >> sz ; v . push_back ( 0 ); for ( int i = 0 ; i < sz ; i ++ ) { int x ; cin >> x ; v . push_back ( x ); } } for ( auto & v : items ) { int sz ; cin >> sz ; v . resize ( sz + 1 ); v [ 0 ]. first = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { v [ 0 ]. second . push_back ( 0 ); } for ( int i = 1 ; i <= sz ; i ++ ) { cin >> v [ i ]. first ; } for ( int i = 1 ; i <= sz ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { int x ; cin >> x ; v [ i ]. second . push_back ( x ); } } } int ans = 0 ; for ( int i = 0 ; i < items [ 0 ]. size (); i ++ ) { for ( int j = 0 ; j < items [ 1 ]. size (); j ++ ) { for ( int k = 0 ; k < items [ 2 ]. size (); k ++ ) { ans = max ( ans , calculate ( t , items [ 0 ][ i ], items [ 1 ][ j ], items [ 2 ][ k ])); } } } cout << ans << '\\n' ; return 0 ; }","title":"C \uc218\ub835\uc758 \uc2dc\uac04\uc774\ub2e4!"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#d","text":"\ubb38\uc81c \ub9c1\ud06c \uccab \ubc88\uc9f8 \ub0a0\uc5d0\ub294 \ud56d\uc0c1 \uc591\uc774 \ub3c4\ucc29\ud558\uace0, \ub9c8\uc9c0\ub9c9 \ub0a0\uc5d0\ub294 \ud56d\uc0c1 \ub291\ub300\uc758 \uc218\uac00 \uc591\uc758 \uc218\ubcf4\ub2e4 \ub9ce\uace0, \ud558\ub8e8\uc5d0 \ub291\ub300 \ud639\uc740 \uc591\uc774 \ud55c \ub9c8\ub9ac\uc529 \ub3c4\ucc29\ud558\uae30 \ub54c\ubb38\uc5d0 1\ubc88\uc9f8 \ub0a0\ubd80\ud130 \\(N\\) \ubc88\uc9f8 \ub0a0\uc911 \uc801\uc5b4\ub3c4 \ud558\ub8e8 \uc774\uc0c1 \ub291\ub300\uc640 \uc591\uc758 \uc218\uac00 \uac19\uc544\uc9c4\ub2e4. - \\(lo <= hi\\) \uc774\uace0, \\(mid = (lo+hi)/2\\) \ub77c \ud558\uc790. - \\(mid\\) \ubc88\uc9f8 \ub0a0\uc5d0 \uc591\uacfc \ub291\ub300\uc758 \uc218\uac00 \uac19\ub2e4\uba74 \\(mid\\) \ubc88\uc9f8 \ub0a0\uc774 \uc815\ub2f5\uc774\ub2e4. - \\(mid\\) \ubc88\uca30 \ub0a0\uc5d0 \uc591\uc774 \ub354 \ub9ce\ub2e4\uba74, \\(mid+1\\) \ubc88\uc9f8 \ub0a0\uacfc \\(hi\\) \ubc88\uc9f8 \ub0a0 \uc0ac\uc774\uc5d0 \uc815\ub2f5\uc774 \uc874\uc7ac\ud55c\ub2e4. - \\(mid\\) \ubc88\uc9f8 \ub0a0\uc5d0 \ub291\ub300\uac00 \ub354 \ub9ce\ub2e4\uba74 \\(lo\\) \ubc88\uc9f8 \ub0a0\uacfc \\(mid-1\\) \ubc88\uc9f8 \ub0a0 \uc0ac\uc774\uc5d0 \uc815\ub2f5\uc774 \uc874\uc7ac\ud55c\ub2e4. \uc778\ud130\ub799\ud2f0\ube0c \ubb38\uc81c\ub77c \ucd9c\ub825 \uc774\ud6c4 \ubc84\ud37c\ub97c flush \ud574\uc57c \ud55c\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n ; cin >> n ; int lo = 1 , hi = n , cnt ; while ( lo <= hi ) { int mid = ( lo + hi ) / 2 ; cout << \"? \" << mid << endl ; cin >> cnt ; if ( cnt * 2 > mid ) lo = mid + 1 ; else if ( cnt * 2 < mid ) hi = mid - 1 ; else { cout << \"! \" << mid << endl ; break ; } } return 0 ; }","title":"D \uc591\uacfc \ub291\ub300"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#e","text":"\ubb38\uc81c \ub9c1\ud06c \\(\\sum_{i=S}^{T}{a_i}\\) \ub294 \\(\\sum_{i=1}^{T}{a_i}\\) - \\(\\sum_{i=1}^{S-1}{a_i}\\) \uc774\ubbc0\ub85c \\(\\sum_{i=1}^{N}{a_i}\\) \uc744 \uad6c\ud558\uba74 \ub41c\ub2e4. \uc5b4\ub5a4 \uc591\uc758 \uc815\uc218 \\(d\\) \ub294 \\(\\sum_{i=1}^{N}{a_i}\\) \uc5d0 \\(1\\) \uacfc \\(N\\) \uc0ac\uc774\uc5d0 \uc874\uc7ac\ud558\ub294 \\(d\\) \uc758 \ubc30\uc218\uc758 \uac1c\uc218\ub9cc\ud07c \uae30\uc5ec\ud55c\ub2e4. \ud640\uc218\uc774\uba74 \\((-1) \\times \\lfloor \\frac{N}{d} \\rfloor\\) \ub9cc\ud07c, \uc9dd\uc218\uc774\uba74 \\((1) \\times \\lfloor \\frac{N}{d} \\rfloor\\) \ub9cc\ud07c \uae30\uc5ec\ud55c\ub2e4. \ubc30\uc218\ub97c \uc77c\uc77c\ud788 \uad6c\ud558\uba74 \uc2dc\uac04 \ucd08\uacfc\ub97c \ubc1b\uc744 \uc218 \uc788\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int solve ( int n ) { int ret = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = ( i % 2 ) ? -1 : 1 ; ret += ( n / i ) * x ; } return ret ; } int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int s , t ; cin >> s >> t ; cout << solve ( t ) - solve ( s -1 ) << '\\n' ; return 0 ; }","title":"E \uc218\uc5f4\uc758 \ud569"},{"location":"PS/Programming%20Contest/2022%20SKKU%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%8C%80%ED%9A%8C%20in%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98%20%EB%B0%A4/#f","text":"\ubb38\uc81c \ub9c1\ud06c \\(x\\) \ub97c \uace0\uc815\uc2dc\ucf1c \ub193\uace0, \uc8fc\uc5b4\uc9c4 \uc785\ub825\uc744 \ub530\ub77c\uac00\uba74 \ucd1d \uba87 \uac1c\uc758 \uc791\ubb3c\uc744 \uc218\ud655\ud560 \uc218 \uc788\ub294\uc9c0 \ub098\uc628\ub2e4. Parametric Search \uac00\ub2a5. \uc138\ud2b8 \uc218 \\(\\times\\) \uc9c4\ud589 \ud69f\uc218 \\(= M\\) \uc774 \ucd5c\ub300 \\(1,000,000\\) \uc774\ubbc0\ub85c \ub9e4\ubc88 \uae38\uc744 \ub530\ub77c\uac00\uba74 \uc2dc\uac04 \ucd08\uacfc\ub97c \ubc1b\uac8c \ub418\uace0, \ubbf8\ub9ac \uc88c\ud45c\ub9c8\ub2e4 \uc5b8\uc81c \ub3c4\ucc29\ud558\ub294\uc9c0 \uc804\ucc98\ub9ac\ub97c \ud560 \ud544\uc694\uac00 \uc788\ub2e4. \\(-1,000,000 \\le x \\le 1,000,000, -1,000,000 \\le y \\le 1,000,000\\) \ub77c\uc11c 2\ucc28\uc6d0 \ubc30\uc5f4\uc744 \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. map \uc5d0 \uc88c\ud45c\uc640 \ubc29\ubb38 \uc2dc\uc810\uc744 \uae30\ub85d\ud55c\ub2e4. \ub9e4\ubc88 2\ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uae30\ub85d\ud588\ub294\ub370 map \uc744 \uc4f0\ub294 \ubc29\uc2dd\ub3c4 \uc54c\uc544\ub46c\uc57c\uaca0\ub2e4. #include <bits/stdc++.h> using namespace std ; using ll = long long ; int main () { ios_base :: sync_with_stdio ( 0 ); cin . tie ( 0 ); int n , k ; cin >> n >> k ; vector < pair < char , int >> v ( n ); for ( auto & [ a , b ] : v ) { cin >> a >> b ; } map < pair < int , int > , vector < int >> m ; map < char , pair < int , int >> mm ; mm [ 'N' ] = { 1 , 0 }; mm [ 'S' ] = { -1 , 0 }; mm [ 'E' ] = { 0 , 1 }; mm [ 'W' ] = { 0 , -1 }; int y = 0 , x = 0 , t = 0 ; for ( auto & [ a , b ] : v ) { auto & [ dy , dx ] = mm [ a ]; for ( int i = 0 ; i < b ; i ++ ) { y += dy ; x += dx ; m [{ y , x }]. emplace_back ( ++ t ); } } int lo = 0 , hi = 1000000 ; while ( lo <= hi ) { int cnt = 0 ; int mid = ( lo + hi ) / 2 ; for ( auto & [ p , v ] : m ) { for ( int i = 0 ; i < v . size () -1 ; i ++ ) { for ( int j = i + 1 ; j < v . size (); j ++ ) { if ( v [ j ] - v [ i ] < mid ) continue ; else { cnt ++ ; i = j -1 ; break ; } } } } if ( cnt < k ) hi = mid - 1 ; else lo = mid + 1 ; } cout << hi << '\\n' ; return 0 ; }","title":"F \uc218\ud655\uc758 \uacc4\uc808\uc774\ub2e4!"},{"location":"PS/Programming%20Contest/2022%20%EC%84%B1%EA%B7%A0%EA%B4%80%EB%8C%80%ED%95%99%EA%B5%90%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EA%B2%BD%EC%A7%84%EB%8C%80%ED%9A%8C/","text":"22\ub144 2\uc6d4\uc5d0 \uc2f8\uc9c0\ubc29\uc5d0\uc11c \uc9c4\ud589\ud55c \ub300\ud68c. \uc0b4\uba74\uc11c \ucc98\uc74c\uc73c\ub85c \ud504\ub85c\uadf8\ub798\ubc0d \ub300\ud68c\uc5d0 \ucc38\uac00\ud588\ub294\ub370, \ubc31\uc900\uc5d0\uc11c \ud0dc\uadf8 \uae4c\uace0 \uc2dc\uac04\uc81c\ud55c \uc5c6\uc774 \ubb38\uc81c \ud478\ub294\uac70\ub791\uc740 \uc644\uc804 \ub2e4\ub978 \ub290\ub08c. \uc5b4? \uc138\uadf8\uba3c\ud2b8 \ud2b8\ub9ac? \ud558\uace0 \ub69d\ub531\ub69d\ub531 \uc9f0\ub294\ub370 \uc54c\uace0\ubcf4\ub2c8 \uadf8\ub0e5 \ub204\uc801\ud569 \ubb38\uc81c\uc600\ub2e4.","title":"2022 \uc131\uade0\uad00\ub300\ud559\uad50 \ud504\ub85c\uadf8\ub798\ubc0d \uacbd\uc9c4\ub300\ud68c"}]}